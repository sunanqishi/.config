{
  "name": "promises-aplus-tests",
  "description": "Compliance test suite for Promises/A+",
  "keywords": [
    "promises",
    "promises-aplus"
  ],
  "version": "2.0.3",
  "implements": [
    "Promises/A+ 1.1.0"
  ],
  "author": {
    "name": "Domenic Denicola",
    "email": "domenic@domenicdenicola.com",
    "url": "http://domenicdenicola.com"
  },
  "license": "WTFPL",
  "repository": {
    "type": "git",
    "url": "git://github.com/promises-aplus/promises-tests.git"
  },
  "bugs": {
    "url": "https://github.com/promises-aplus/promises-tests/issues"
  },
  "main": "lib/programmaticRunner.js",
  "bin": {
    "promises-aplus-tests": "lib/cli.js"
  },
  "scripts": {
    "lint": "jshint lib"
  },
  "dependencies": {
    "mocha": "~1.13.0",
    "sinon": "~1.7.3",
    "underscore": "~1.5.2"
  },
  "devDependencies": {
    "jshint": "~2.3.0"
  },
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\">\n    <img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\"\n         align=\"right\" alt=\"Promises/A+ logo\" />\n</a>\n\n# Promises/A+ Compliance Test Suite\n\nThis suite tests compliance of a promise implementation with the [Promises/A+ specification][].\n\n[Promises/A+ specification]: https://github.com/promises-aplus/promises-spec\n\n## How To Run\n\nThe tests run in a Node.js environment; make sure you have that installed.\n\n### Adapters\n\nIn order to test your promise library, you must expose a very minimal adapter interface. These are written as Node.js\nmodules with a few well-known exports:\n\n- `resolved(value)`: creates a promise that is resolved with `value`.\n- `rejected(reason)`: creates a promise that is already rejected with `reason`.\n- `deferred()`: creates an object consisting of `{ promise, resolve, reject }`:\n  - `promise` is a promise that is currently in the pending state.\n  - `resolve(value)` resolves the promise with `value`.\n  - `reject(reason)` moves the promise from the pending state to the rejected state, with rejection reason `reason`.\n\nThe `resolved` and `rejected` exports are actually optional, and will be automatically created by the test runner using\n`deferred` if they are not present. But, if your promise library has the capability to create already-resolved or\nalready-rejected promises, then you should include these exports, so that the test runner can provide you with better\ncode coverage and uncover any bugs in those methods.\n\nNote that the tests will never pass a promise or a thenable as a resolution. That means that we never use the promise-\nor thenable-accepting forms of the resolve operation directly, and instead only use the direct fulfillment operation,\nsince fulfill and resolve are equivalent when not given a thenable.\n\nFinally, note that none of these functions, including `deferred().resolve` and `deferred().reject`, should throw\nexceptions. The tests are not structured to deal with that, and if your implementation has the potential to throw\nexceptions—e.g., perhaps it throws when trying to resolve an already-resolved promise—you should wrap direct calls to\nyour implementation in `try`/`catch` when writing the adapter.\n\n### From the CLI\n\nThis package comes with a command-line interface that can be used either by installing it globally with\n`npm install promises-aplus-tests -g` or by including it in your `package.json`'s `devDependencies` and using npm's\n`scripts` feature. In the latter case, your setup might look something like\n\n```json\n{\n    \"devDependencies\": {\n        \"promises-aplus-tests\": \"*\"\n    },\n    \"scripts\": {\n        \"test\": \"run-my-own-tests && promises-aplus-tests test/my-adapter\"\n    }\n}\n```\n\nThe CLI takes as its first argument the filename of your adapter file, relative to the current working directory. It\ntries to pass through any subsequent options to Mocha, so you can use e.g. `--reporter spec` or `--grep 2.2.4`.\n\n### Programmatically\n\nThe main export of this package is a function that allows you to run the tests against an adapter:\n\n```js\nvar promisesAplusTests = require(\"promises-aplus-tests\");\n\npromisesAplusTests(adapter, function (err) {\n    // All done; output is in the console. Or check `err` for number of failures.\n});\n```\n\nYou can also pass any Mocha options as the second parameter, e.g.\n\n```js\npromisesAplusTests(adapter, { reporter: \"dot\" }, function (err) {\n  // As before.\n});\n```\n\n### Within an Existing Mocha Test Suite\n\nIf you already have a Mocha test suite and want to include these tests in it, you can do:\n\n```js\ndescribe(\"Promises/A+ Tests\", function () {\n    require(\"promises-aplus-tests\").mocha(adapter);\n});\n```\n\nThis only works in Node.js, however.\n",
  "readmeFilename": "README.md",
  "_id": "promises-aplus-tests@2.0.3",
  "dist": {
    "shasum": "990ae2480e786b814f1a57238b205e4b37dbd559"
  },
  "_from": "promises-aplus-tests@~2",
  "_resolved": "https://registry.npmjs.org/promises-aplus-tests/-/promises-aplus-tests-2.0.3.tgz"
}
